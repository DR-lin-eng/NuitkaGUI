name: Build NuitkaGUI Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']
        include:
          - os: windows-latest
            output-name: NuitkaGUI.exe
          - os: ubuntu-latest
            output-name: NuitkaGUI
          - os: macos-latest
            output-name: NuitkaGUI

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取所有历史记录和标签
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'  # 缓存pip依赖
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install nuitka
        
        # 安装所有项目依赖
        python -m pip install ansi2html==1.9.2 colorama==0.4.6 darkdetect==0.8.0 loguru==0.7.2 pyside6==6.7.3 pyside6-addons==6.7.3 pyside6-essentials==6.7.3 pyside6-fluent-widgets==1.6.5 pysidesix-frameless-window==0.4.3 shiboken6==6.7.3 typing-extensions==4.12.2 win32-setctime==1.1.0
        
        # 在Windows上安装pywin32
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          python -m pip install pywin32==306
        fi
        
        # 安装项目本身（开发模式）
        python -m pip install -e .
      shell: bash
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libxkbcommon-x11-0 libdbus-1-3 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0 libpulse0 libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good
      
    - name: Build with Nuitka (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python -m nuitka --standalone --onefile --assume-yes-for-downloads --enable-plugin=pyside6 --include-package=loguru --include-package=darkdetect --include-package=ansi2html --include-package=colorama --include-package-data=pyside6_fluent_widgets --follow-imports --output-dir=dist NuitkaGUI.py
    
    - name: Build with Nuitka (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m nuitka --standalone --onefile --assume-yes-for-downloads --enable-plugin=pyside6 --include-package=loguru --include-package=darkdetect --include-package=ansi2html --include-package=colorama --include-package-data=pyside6_fluent_widgets --follow-imports --output-dir=dist NuitkaGUI.py
    
    - name: Build with Nuitka (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        python -m nuitka --standalone --onefile --assume-yes-for-downloads --enable-plugin=pyside6 --include-package=loguru --include-package=darkdetect --include-package=ansi2html --include-package=colorama --include-package-data=pyside6_fluent_widgets --follow-imports --output-dir=dist NuitkaGUI.py
    
    - name: Prepare artifact name
      id: artifact-name
      shell: bash
      run: |
        echo "name=NuitkaGUI-${{ matrix.os }}" >> $GITHUB_OUTPUT
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact-name.outputs.name }}
        path: dist/${{ matrix.output-name }}
        if-no-files-found: error
        retention-days: 30
    
    # 创建GitHub Release（仅对标签触发执行）
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/${{ matrix.output-name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
